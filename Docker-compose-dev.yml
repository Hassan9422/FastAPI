# we are gonna spin up/lunch/instantiate as many containers as we want with our desired config with just one docker command. 
# in the same way we wanna tear down as all of our containers with just one cpmmand, instead of doing it in multiple steps.
# for this we create a file called docker-composed.yml.
# yml is a kind of a markup language


# first we specify the version of docker-compose we wanna use
version: "3"

# here wa are gonna specify the services which basically are our containers that we wanna spin up using this file.
# so in services are are going to specify our containers
services:
  social-media-app:
    depends_on:
      - postgres
    build: .
    ports:
    # here we are tellinh docker to take whatever data that we recieve on our localhost on port 8000(left one) and forward it to
    # the port 8000(right one) of our container.
    # localhost port can be our own personal computer port or production port.
      - 8000:8000


    # in this section we wanna use a special volume, because it allowd us to sync a specific folder on our machine
    # with our docker container, so whatever change we make in our code, will get pushed to our container as well.
    # before using this special volume here, that was not the case and our changes in code didn't get pushed out in our
    # container. because our container was created. and our changed had no way to get pushed out in the container.
    volumes:
      # left side of colon is the current folder on our machine, and the right side of the colon is the path that we 
      # wanna sync our desired local folder into it.(i.e we are going to sync ./ folder on our local machine which is the current
      # directory on our local machine with the /usr/src/app path on our container, so that whatever changes we make in our local 
      # environment will get pushed out in our container automatically. ro means read only which means the container
      # can't cahnge anything, it can only read the content inside)
      - ./:/usr/src/app:ro

    # we can override the last command in our dockerfile by using below command:
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

    # if for whatever reason, we couldn't build our image and it gave us error, maybe we have to pass our environment variables
    # to our container. we can do that using "env_file:", like below:

    # env_file:
    #   - ./.env
    environment:
      - DATABASE_HOSTNAME=postgres
      - DATABASE_PORT=5432
      - DATABASE_NAME=FastAPI
      - DATABASE_USERNAME=postgres
      - DATABASE_PASSWORD=940202
      - SECRET_KEY=09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30  



  # in below, we have defined a container for our postgre database. basically using and creating a database container is very
  # easy and recommended to use. even for development environment it is recommended to use postgres docker image to create 
  # a postgres database. so let's go and create a one. btw, in fact, we need to create this. because in previous service,
  # we specifies that our databanse_name is localhost and it means we have ti have database on our localhost which is the container!
  # but at the moment we don't. so gotta create a one

  postgres:
  # for this we can use postgres docker image documentation for instruction to how establish a postgres database image
    image: postgres
    environment:
      - POSTGRES_PASSWORD=940202
      - POSTGRES_DB=FastAPI

    # this volumes is needed if we wanna protect our data even after killing off the container. if we don't specify this, 
    # our database data will be gone after container goes down so we definitely don't want that! so we need this. 
    # this is going to save our data to our local machine, and even after deleting the container and creating a new one, 
    # we can point the new database to this volume to restore all of our data.
    volumes:
      - postgres-db:/var/lib/postgresql/data
        
volumes:
   postgres-db:

